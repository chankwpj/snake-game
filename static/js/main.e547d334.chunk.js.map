{"version":3,"sources":["store/domain/Snake.ts","Constant.ts","Board.tsx","store/domain/actions.ts","Score.tsx","Modal.tsx","App.tsx","store/Action.ts","reportWebVitals.ts","store/ActionReducer.ts","store/rootStore.ts","index.tsx"],"names":["Direction","BOARD_LENGTH","INITIAL_BODY","BOARD","Array","apply","map","v1","r","Board","this","props","snake","food","bodyIdSet","Set","body","add","toKey","className","row","rindx","col","cindx","updateBoard","x","y","has","c","React","Component","Snake","bodyLength","length","direction","Right","speed","Up","Down","Left","unshift","pop","dir","set","bodyPart","size","MOVE_SNAKE","CHANGE_SNAKE_DIRECTION","PAUSE_GAME","CONTINUE_GAME","RESET_GAME","Score","score","Modal","resetCommand","defaultOpen","modal","onClose","close","onClick","App","keydown","gameInterval","setInterval","fullProps","isPaused","move","isGameOver","clearInterval","isSpeedUpdated","changeDirection","continueCommand","pauseCommand","connect","state","actionReducer","dispatch","type","changeSnakeDirection","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaultState","randomPosition","Math","floor","random","copyState","currentState","nextState","slice","rootReducer","combineReducers","action","isCrashed","console","log","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e547d334.chunk.js","sourcesContent":["import {BOARD_LENGTH, INITIAL_SPEED, INITIAL_SNAKE_HEAD_X, INITIAL_SNAKE_HEAD_Y, INITIAL_BODY} from \"../../Constant\";\n\nenum Direction {\n  Up,\n  Down,\n  Left,\n  Right\n}\n\nclass Snake {\n\n  x: number = INITIAL_SNAKE_HEAD_X;\n  y: number = INITIAL_SNAKE_HEAD_Y;\n  bodyLength: number = INITIAL_BODY.length;\n  body: number[][] = INITIAL_BODY;\n  direction: Direction = Direction.Right;\n  speed: number = INITIAL_SPEED;\n\n  move(): void {\n    if (this.direction === Direction.Up) {\n      this.x -= 1;\n    } else if (this.direction === Direction.Down) {\n      this.x += 1;\n    } else if (this.direction === Direction.Left) {\n      this.y -= 1;\n    } else if (this.direction === Direction.Right) {\n      this.y += 1;\n    }\n\n    if (this.x < 0) {\n      this.x = BOARD_LENGTH - 1;\n    }\n    if (this.y < 0) {\n      this.y = BOARD_LENGTH - 1;\n    }\n    if (this.x >= BOARD_LENGTH) {\n      this.x = 0;\n    }\n    if (this.y >= BOARD_LENGTH) {\n      this.y = 0;\n    }\n        \n    this.body.unshift([this.x, this.y]); //add to head\n    if (this.body.length > this.bodyLength) {\n      this.body.pop(); //remove end\n    }\n  }\n\n  changeDirection(dir: Direction): void {\n    if ((dir === Direction.Down && this.direction === Direction.Up)) {\n      return;\n    }\n\n    if ((dir === Direction.Up && this.direction === Direction.Down)) {\n      return;\n    }\n\n    if ((dir === Direction.Right && this.direction === Direction.Left)) {\n      return;\n    }\n\n    if ((dir === Direction.Left && this.direction === Direction.Right)) {\n      return;\n    }\n    this.direction = dir;\n  }\n\n  isCrashed(): boolean {\n    const set = new Set();\n    this.body.map((bodyPart: number[]) => {\n      set.add(bodyPart[0] + '' + bodyPart[1]);\n      return set;\n    })\n    return set.size !== this.body.length;\n  }\n\n}\n\nexport { Snake, Direction };\n","\r\nconst BOARD_LENGTH: number = 15;\r\nconst INITIAL_SPEED: number = 100;\r\nconst INITIAL_SNAKE_HEAD_X: number = 0;\r\nconst INITIAL_SNAKE_HEAD_Y: number = 8;\r\nconst INITIAL_BODY: number[][] = [[0, 8], [0, 7], [0, 6], [0, 5], [0, 4], [0, 3], [0, 2], [0, 1], [0, 0]];\r\nconst SPEED_MULTIPLIER: number = 0.85;\r\nconst SCORE: number = 10;\r\nconst BOARD: number[][] = Array.apply(null, Array(BOARD_LENGTH)).map((v1, r) => {\r\n    return Array.apply(null, Array(BOARD_LENGTH)) as number[];\r\n});\r\n\r\nexport { BOARD_LENGTH, INITIAL_SPEED, INITIAL_SNAKE_HEAD_X, INITIAL_SNAKE_HEAD_Y, INITIAL_BODY, SPEED_MULTIPLIER, SCORE, BOARD };\r\n","import React from 'react';\nimport './App.css';\nimport {BOARD} from './Constant';\nimport {Snake} from './store/domain/Snake';\n\ninterface Props {\n  snake: Snake;\n  food: number[];\n}\n\nclass Board extends React.Component {\n\n  render() {\n    const { snake, food } = this.props as Props;\n    const bodyIdSet = new Set<String>();\n    snake.body.map(body => {\n      bodyIdSet.add(this.toKey(body[0], body[1]));\n    });\n    return (\n      <div className=\"snake-game__map-wrapper\">\n        {BOARD.map((row, rindx) => {\n          return row.map((col, cindx) => {\n            return <div\n            className={this.updateBoard(bodyIdSet, food, rindx, cindx)}\n            key={this.toKey(rindx, cindx)}/>\n          });\n        })}\n      </div>\n    );\n  }\n\n  updateBoard(bodyIdSet: Set<String>, food: number[], x: number, y: number): string {\n    if (bodyIdSet.has(this.toKey(x, y))) { //body TODO: change to set\n      return \"snake-game__draw-snake-body snake-game__map-block-item\";\n    } else if(x === food[0] && y === food[1]) { //food\n      return \"snake-game__draw-snake-food snake-game__map-block-item\";\n    } else {\n      return \"snake-game__map-block-item\";\n    }\n  }\n\n  toKey(r: number, c: number): string {\n    return r + '-' + c;\n  }\n\n}\n\nexport default Board;\n","import { Direction } from \"./Snake\";\r\n\r\nexport const MOVE_SNAKE = 'MOVE_SNAKE';\r\nexport const CHANGE_SNAKE_DIRECTION = 'CHANGE_SNAKE_DIRECTION';\r\nexport const PAUSE_GAME = 'PAUSE_GAME';\r\nexport const CONTINUE_GAME = 'CONTINUE_GAME';\r\nexport const RESET_GAME = 'RESET_GAME';\r\n\r\ninterface MoveAction {\r\n  type: typeof MOVE_SNAKE,\r\n}\r\n\r\ninterface ChangeDirection {\r\n  type: typeof CHANGE_SNAKE_DIRECTION,\r\n  direction: Direction\r\n}\r\n\r\ninterface PauseGame {\r\n  type: typeof PAUSE_GAME,\r\n}\r\n\r\ninterface ContinueGame {\r\n  type: typeof CONTINUE_GAME,\r\n}\r\n\r\ninterface ResetGame {\r\n  type: typeof RESET_GAME,\r\n}\r\n\r\nexport type ActionTypes = MoveAction | ChangeDirection | PauseGame | ContinueGame | ResetGame;\r\n","import React from 'react';\nimport './App.css';\n\ninterface Props {\n  score: number\n}\n\nclass Score extends React.Component {\n\n  render() {\n    const { score } = this.props as Props;\n    // console.log('Rendering score');\n    return (\n      <div>Score: {score}</div>\n    );\n  }\n\n}\n\nexport default Score;\n","import React from 'react';\r\nimport Popup from 'reactjs-popup';\r\n\r\ninterface Props {\r\n  resetCommand: () => void;\r\n  score: Number;\r\n}\r\n\r\nclass Modal extends React.Component {\r\n\r\n  render() {\r\n\r\n    const { score, resetCommand } = this.props as Props;\r\n\r\n    return (\r\n      <Popup\r\n        defaultOpen={true}\r\n        modal={true}\r\n        onClose={() => {\r\n          resetCommand();\r\n        }}\r\n      >\r\n        {close => (\r\n          <div className=\"modal\">\r\n            <div className=\"header\">------------ Game Over ------------</div>\r\n            <div className=\"content\">\r\n              Your Score is {score}!\r\n              <br />\r\n            </div>\r\n            <div className=\"actions\">\r\n              <button\r\n                className=\"button\"\r\n                onClick={() => {\r\n                  close();\r\n                }}\r\n              >Try Again\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Popup>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Modal;","import React from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { AppState } from './store/rootStore';\nimport keydown from 'react-keydown';\n\nimport './App.css';\nimport Board from './Board';\nimport { Direction, Snake } from './store/domain/Snake';\nimport { moveSnake, changeSnakeDirection, pauseGame, continueGame, resetGame } from './store/Action';\nimport Score from './Score';\nimport Modal from './Modal';\n\ninterface AppProps {\n  move: () => void;\n  changeDirection: (dir: Direction) => void;\n  pauseCommand: () => void;\n  continueCommand: () => void;\n  resetCommand:() => void;\n}\n\n//TODO: this should be able to extends AppProps and AppState\ninterface FullProps {\n  move: () => void;\n  changeDirection: (dir: Direction) => void;\n  pauseCommand: () => void;\n  continueCommand: () => void;\n  resetCommand:() => void;\n  snake: Snake;\n  score: number;\n  food: number[];\n  isSpeedUpdated: boolean;\n  isPaused: boolean;\n  isGameOver: boolean;\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  snake: state.actionReducer.snake,\n  score: state.actionReducer.score,\n  food: state.actionReducer.food,\n  isSpeedUpdated: state.actionReducer.isSpeedUpdated,\n  isPaused: state.actionReducer.isPaused,\n  isGameOver: state.actionReducer.isGameOver\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): AppProps => ({\n  move: () => dispatch(moveSnake()),\n  changeDirection: (dir: Direction) => dispatch(changeSnakeDirection(dir)),\n  pauseCommand: () => dispatch(pauseGame()),\n  continueCommand: () => dispatch(continueGame()),\n  resetCommand:() => dispatch(resetGame()),\n});\n\nclass App extends React.Component<AppProps, AppState> {\n\n  gameInterval: NodeJS.Timeout = setInterval(() => { }, 300);\n\n  componentDidMount() {\n    const fullProps = this.props as FullProps;\n    if (!fullProps.isPaused) {\n      this.gameInterval = setInterval(() => { this.props.move() }, fullProps.snake.speed);\n    }\n  }\n\n  componentDidUpdate() {\n    const fullProps = this.props as FullProps;\n    if (fullProps.isGameOver) {\n      clearInterval(this.gameInterval);\n    } else if (!fullProps.isPaused || fullProps.isSpeedUpdated) {\n      clearInterval(this.gameInterval);\n      this.gameInterval = setInterval(() => { this.props.move() }, fullProps.snake.speed);\n    } else {\n      clearInterval(this.gameInterval);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.gameInterval);\n  }\n\n  render() {\n    const fullProps = this.props as FullProps;\n    if (fullProps.isGameOver) {\n      return (\n        <Modal {...this.props}></Modal>\n      )\n    } else {\n      return (\n        <div className=\"App\">\n          <Score {...this.props} />\n          <Board {...this.props} />\n          <div>\n            <p>Moving: Arrow Keys</p>\n            <p>Stop/Resume: Esc</p>\n          </div>\n        </div>\n      );\n    }\n  }\n\n  @keydown('down')\n  arrowDown(): any {\n    this.props.changeDirection(Direction.Down);\n  }\n\n  @keydown('up')\n  arrowUp(): any {\n    this.props.changeDirection(Direction.Up);\n  }\n\n  @keydown('left')\n  arrowLeft(): any {\n    this.props.changeDirection(Direction.Left);\n  }\n\n  @keydown('right')\n  arrowRight(): any {\n    this.props.changeDirection(Direction.Right);\n  }\n\n  @keydown('esc')\n  esc(): any {\n    const fullProps = this.props as FullProps;\n    if (fullProps.isPaused) {\n      fullProps.continueCommand();\n    } else {\n      fullProps.pauseCommand();\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {MOVE_SNAKE, CHANGE_SNAKE_DIRECTION, PAUSE_GAME, CONTINUE_GAME, RESET_GAME} from './domain/actions';\r\nimport { Direction } from './domain/Snake';\r\n\r\nexport const moveSnake = () => ({\r\n    type: MOVE_SNAKE,\r\n});\r\n\r\nexport const changeSnakeDirection = (dir: Direction) => ({\r\n    type: CHANGE_SNAKE_DIRECTION,\r\n    direction: dir,\r\n});\r\n\r\nexport const pauseGame = () => ({\r\n    type: PAUSE_GAME,\r\n});\r\n\r\nexport const continueGame = () => ({\r\n    type: CONTINUE_GAME,\r\n});\r\n\r\nexport const resetGame = () => ({\r\n    type: RESET_GAME,\r\n});\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { Action, Reducer } from 'redux';\r\nimport { GameState } from \"./domain/GameState\"\r\nimport { ActionTypes, MOVE_SNAKE, CHANGE_SNAKE_DIRECTION, PAUSE_GAME, CONTINUE_GAME, RESET_GAME } from './domain/actions'\r\nimport { Snake } from './domain/Snake';\r\nimport { BOARD_LENGTH, SCORE, SPEED_MULTIPLIER } from '../Constant';\r\n\r\nconst defaultState: GameState = {\r\n    snake: new Snake(),\r\n    score: 0,\r\n    food: randomPosition(),\r\n    isSpeedUpdated: false,\r\n    isPaused: false,\r\n    isGameOver: false,\r\n};\r\n\r\nfunction randomPosition(): number[] {\r\n    return [Math.floor(Math.random() * BOARD_LENGTH), Math.floor(Math.random() * BOARD_LENGTH)];\r\n}\r\n\r\nfunction copyState(currentState: GameState) {\r\n    const nextState: GameState = {\r\n        snake: new Snake(),\r\n        score: currentState.score,\r\n        food: currentState.food,\r\n        isSpeedUpdated: false,\r\n        isPaused: currentState.isPaused,\r\n        isGameOver: currentState.isGameOver\r\n    };\r\n\r\n    const snake = nextState.snake;\r\n    snake.x = currentState.snake.x;\r\n    snake.y = currentState.snake.y;\r\n    snake.speed = currentState.snake.speed;\r\n    snake.direction = currentState.snake.direction;\r\n    snake.bodyLength = currentState.snake.bodyLength;\r\n    snake.body = currentState.snake.body.slice();\r\n\r\n    return nextState;\r\n}\r\n\r\nexport const actionReducer: Reducer<GameState, Action> = (\r\n    state = defaultState,\r\n    action: ActionTypes\r\n) => {\r\n\r\n    if (action.type === RESET_GAME) {\r\n        return defaultState;\r\n    }\r\n\r\n    const nextState: GameState = copyState(state);\r\n    const snake = nextState.snake;\r\n\r\n    switch (action.type) {\r\n        case MOVE_SNAKE:\r\n            snake.move();\r\n            if (snake.x === state.food[0] && snake.y === state.food[1]) {\r\n                snake.bodyLength += 1;\r\n                snake.speed *= SPEED_MULTIPLIER;\r\n                nextState.isSpeedUpdated = true;\r\n                nextState.food = randomPosition();\r\n                nextState.score += SCORE;\r\n            } else if (snake.isCrashed()) {\r\n                console.log('Game is over.');\r\n                nextState.isGameOver = true;\r\n            }\r\n            return nextState;\r\n        case CHANGE_SNAKE_DIRECTION:\r\n            snake.changeDirection(action.direction);\r\n            return nextState;\r\n        case PAUSE_GAME:\r\n            console.log('Pause the game');\r\n            nextState.isPaused = true;\r\n            return nextState;\r\n        case CONTINUE_GAME:\r\n            console.log('Continue the game');\r\n            nextState.isPaused = false;\r\n            return nextState;\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}","import { createStore, combineReducers} from 'redux';\r\nimport { actionReducer } from './ActionReducer';\r\n\r\nexport const rootReducer = combineReducers({ actionReducer });\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\nexport const store = createStore(rootReducer);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Provider } from 'react-redux';\nimport { store } from './store/rootStore';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}