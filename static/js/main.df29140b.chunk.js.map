{"version":3,"sources":["store/domain/Snake.ts","Constant.ts","Board.tsx","store/domain/actions.ts","Score.tsx","App.tsx","store/Action.ts","reportWebVitals.ts","store/ActionReducer.ts","store/rootStore.ts","index.tsx"],"names":["Direction","BOARD_LENGTH","INITIAL_BODY","Board","this","props","snake","food","className","Array","apply","map","v1","r","v2","c","updateBoard","toKey","x","y","body","find","e","React","Component","Snake","bodyLength","length","direction","Right","speed","Up","Down","Left","unshift","pop","dir","set","Set","bodyPart","add","size","MOVE_SNAKE","CHANGE_SNAKE_DIRECTION","PAUSE_GAME","CONTINUE_GAME","Score","score","App","keydown","gameInterval","setInterval","fullProps","isPaused","move","isSpeedUpdated","clearInterval","changeDirection","continueCommand","pauseCommand","connect","state","actionReducer","isGameOver","dispatch","type","changeSnakeDirection","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaultState","randomPosition","Math","floor","random","rootReducer","combineReducers","action","nextState","Object","create","isCrashed","console","log","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df29140b.chunk.js","sourcesContent":["import {BOARD_LENGTH, INITIAL_SPEED, INITIAL_SNAKE_HEAD_X, INITIAL_SNAKE_HEAD_Y, INITIAL_BODY} from \"../../Constant\";\n\nenum Direction {\n  Up,\n  Down,\n  Left,\n  Right\n}\n\nclass Snake {\n\n  x: number = INITIAL_SNAKE_HEAD_X;\n  y: number = INITIAL_SNAKE_HEAD_Y;\n  bodyLength: number = INITIAL_BODY.length;\n  body: number[][] = INITIAL_BODY;\n  direction: Direction = Direction.Right;\n  speed: number = INITIAL_SPEED;\n\n  move(): void {\n    if (this.direction === Direction.Up) {\n      this.x -= 1;\n    } else if (this.direction === Direction.Down) {\n      this.x += 1;\n    } else if (this.direction === Direction.Left) {\n      this.y -= 1;\n    } else if (this.direction === Direction.Right) {\n      this.y += 1;\n    }\n\n    if (this.x < 0) {\n      this.x = BOARD_LENGTH - 1;\n    }\n    if (this.y < 0) {\n      this.y = BOARD_LENGTH - 1;\n    }\n    if (this.x >= BOARD_LENGTH) {\n      this.x = 0;\n    }\n    if (this.y >= BOARD_LENGTH) {\n      this.y = 0;\n    }\n        \n    this.body.unshift([this.x, this.y]); //add to head\n    if (this.body.length > this.bodyLength) {\n      this.body.pop(); //remove end\n    }\n  }\n\n  changeDirection(dir: Direction): void {\n    if ((dir === Direction.Down && this.direction === Direction.Up)) {\n      return;\n    }\n\n    if ((dir === Direction.Up && this.direction === Direction.Down)) {\n      return;\n    }\n\n    if ((dir === Direction.Right && this.direction === Direction.Left)) {\n      return;\n    }\n\n    if ((dir === Direction.Left && this.direction === Direction.Right)) {\n      return;\n    }\n    this.direction = dir;\n  }\n\n  isCrashed(): boolean {\n    const set = new Set();\n    this.body.map((bodyPart: number[]) => {\n      set.add(bodyPart[0] + '' + bodyPart[1]); //TODO: bodyPart comparision is not working\n      return set;\n    })\n    return set.size !== this.body.length;\n  }\n\n}\n\nexport { Snake, Direction };\n","\r\nconst BOARD_LENGTH: number = 15;\r\nconst INITIAL_SPEED: number = 100;\r\nconst INITIAL_SNAKE_HEAD_X: number = 0;\r\nconst INITIAL_SNAKE_HEAD_Y: number = 8;\r\nconst INITIAL_BODY: number[][] = [[0, 8], [0, 7], [0, 6], [0, 5], [0, 4], [0, 3], [0, 2], [0, 1], [0, 0]];\r\nconst SPEED_MULTIPLIER: number = 0.85;\r\nconst SCORE: number = 10;\r\n\r\nexport { BOARD_LENGTH, INITIAL_SPEED, INITIAL_SNAKE_HEAD_X, INITIAL_SNAKE_HEAD_Y, INITIAL_BODY, SPEED_MULTIPLIER, SCORE };\r\n","import React from 'react';\nimport './App.css';\nimport {BOARD_LENGTH} from './Constant';\nimport {Snake} from './store/domain/Snake';\n\ninterface Props {\n  snake: Snake;\n  food: number[];\n}\n\nclass Board extends React.Component {\n\n  render() {\n    const { snake, food } = this.props as Props;\n    return (\n      <div className=\"snake-game__map-wrapper\">\n        {\n          //TODO: Array.apply seems not memory efficent\n          Array.apply(0, Array(BOARD_LENGTH)).map((v1, r) => {\n            return Array.apply(0, Array(BOARD_LENGTH)).map((v2, c) => {\n              return <div\n                className={this.updateBoard(snake, food, r, c)}\n                key={this.toKey(r, c)} />\n            })\n          })\n        }\n      </div>\n    );\n  }\n\n  updateBoard(snake: Snake, food: number[], x: number, y: number): string {\n    \n    if (snake.body.find((e:number[]) => e[0] === x && e[1] === y)) { //body TODO: change to set\n      return \"snake-game__draw-snake-body snake-game__map-block-item\";\n    } else if(x === food[0] && y === food[1]) { //food\n      return \"snake-game__draw-snake-food snake-game__map-block-item\";\n    } else {\n      return \"snake-game__map-block-item\";\n    }\n  }\n\n  toKey(r: number, c: number): string {\n    return r + '' + c;\n  }\n\n}\n\nexport default Board;\n","import { Direction } from \"./Snake\";\r\n\r\nexport const MOVE_SNAKE = 'MOVE_SNAKE';\r\nexport const CHANGE_SNAKE_DIRECTION = 'CHANGE_SNAKE_DIRECTION';\r\nexport const PAUSE_GAME = 'PAUSE_GAME';\r\nexport const CONTINUE_GAME = 'CONTINUE_GAME';\r\n\r\ninterface MoveAction {\r\n  type: typeof MOVE_SNAKE,\r\n}\r\n\r\ninterface ChangeDirection {\r\n  type: typeof CHANGE_SNAKE_DIRECTION,\r\n  direction: Direction\r\n}\r\n\r\ninterface PauseGame {\r\n  type: typeof PAUSE_GAME,\r\n}\r\n\r\ninterface ContinueGame {\r\n  type: typeof CONTINUE_GAME,\r\n}\r\n\r\nexport type ActionTypes = MoveAction | ChangeDirection | PauseGame | ContinueGame ;\r\n","import React from 'react';\nimport './App.css';\n\ninterface Props {\n  score: number\n}\n\nclass Score extends React.Component {\n\n  render() {\n    const { score } = this.props as Props;\n    // console.log('Rendering score');\n    return (\n      <div>Score: {score}</div>\n    );\n  }\n\n}\n\nexport default Score;\n","import React from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { AppState } from './store/rootStore';\nimport keydown from 'react-keydown';\n\nimport './App.css';\nimport Board from './Board';\nimport { Direction, Snake } from './store/domain/Snake';\nimport { moveSnake, changeSnakeDirection, pauseGame, continueGame } from './store/Action';\nimport Score from './Score';\n\ninterface AppProps {\n  move: () => void;\n  changeDirection: (dir: Direction) => void;\n  pauseCommand: () => void;\n  continueCommand: () => void;\n}\n\n//TODO: this should be able to extends AppProps and AppState\ninterface FullProps {\n  move: () => void;\n  changeDirection: (dir: Direction) => void;\n  pauseCommand: () => void;\n  continueCommand: () => void;\n  snake: Snake;\n  score: number;\n  food: number[];\n  isSpeedUpdated: boolean;\n  isPaused: boolean;\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  snake: state.actionReducer.snake,\n  score: state.actionReducer.score,\n  food: state.actionReducer.food,\n  isSpeedUpdated: state.actionReducer.isSpeedUpdated,\n  isPaused: state.actionReducer.isPaused,\n  isGameOver: state.actionReducer.isGameOver\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): AppProps => ({\n  move: () => dispatch(moveSnake()),\n  changeDirection: (dir: Direction) => dispatch(changeSnakeDirection(dir)),\n  pauseCommand: () => dispatch(pauseGame()),\n  continueCommand: () => dispatch(continueGame())\n});\n\nclass App extends React.Component<AppProps, AppState> {\n\n  gameInterval: NodeJS.Timeout = setInterval(() => { }, 300);\n\n  componentDidMount() {\n    const fullProps = this.props as FullProps;\n    if (!fullProps.isPaused) {\n      this.gameInterval = setInterval(() => { this.props.move() }, fullProps.snake.speed);\n    }\n  }\n\n  componentDidUpdate() {\n    const fullProps = this.props as FullProps;\n    if (!fullProps.isPaused || fullProps.isSpeedUpdated) {\n      clearInterval(this.gameInterval);\n      this.gameInterval = setInterval(() => { this.props.move() }, fullProps.snake.speed);\n    } else {\n      clearInterval(this.gameInterval);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.gameInterval);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Score {...this.props} />\n        <Board {...this.props} />\n        {/* <div>Pause Button</div>\n        <div>Direction Control</div> */}\n      </div>\n    );\n  }\n\n  @keydown('down')\n  arrowDown(): any {\n    this.props.changeDirection(Direction.Down);\n  }\n\n  @keydown('up')\n  arrowUp(): any {\n    this.props.changeDirection(Direction.Up);\n  }\n\n  @keydown('left')\n  arrowLeft(): any {\n    this.props.changeDirection(Direction.Left);\n  }\n\n  @keydown('right')\n  arrowRight(): any {\n    this.props.changeDirection(Direction.Right);\n  }\n\n  @keydown('esc')\n  esc(): any {\n    const fullProps = this.props as FullProps;\n    if (fullProps.isPaused) {\n      fullProps.continueCommand();\n    } else {\n      fullProps.pauseCommand();\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {MOVE_SNAKE, CHANGE_SNAKE_DIRECTION, PAUSE_GAME, CONTINUE_GAME} from './domain/actions';\r\nimport { Direction } from './domain/Snake';\r\n\r\nexport const moveSnake = () => ({\r\n    type: MOVE_SNAKE,\r\n});\r\n\r\nexport const changeSnakeDirection = (dir: Direction) => ({\r\n    type: CHANGE_SNAKE_DIRECTION,\r\n    direction: dir,\r\n});\r\n\r\nexport const pauseGame = () => ({\r\n    type: PAUSE_GAME,\r\n});\r\n\r\nexport const continueGame = () => ({\r\n    type: CONTINUE_GAME,\r\n});\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { Action, Reducer } from 'redux';\r\nimport { GameState } from \"./domain/GameState\"\r\nimport { ActionTypes, MOVE_SNAKE, CHANGE_SNAKE_DIRECTION, PAUSE_GAME, CONTINUE_GAME } from './domain/actions'\r\nimport { Snake } from './domain/Snake';\r\nimport { BOARD_LENGTH, SCORE, SPEED_MULTIPLIER } from '../Constant';\r\n\r\nconst defaultState: GameState = {\r\n    snake: new Snake(),\r\n    score: 0,\r\n    food: randomPosition(),\r\n    isSpeedUpdated: false,\r\n    isPaused: false,\r\n    isGameOver: false,\r\n};\r\n\r\nfunction randomPosition(): number[] {\r\n    return [Math.floor(Math.random() * BOARD_LENGTH), Math.floor(Math.random() * BOARD_LENGTH)];\r\n}\r\n\r\nexport const actionReducer: Reducer<GameState, Action> = (\r\n    state = defaultState,\r\n    action: ActionTypes\r\n) => {\r\n\r\n    if (state.isGameOver) {\r\n        return state;\r\n    }\r\n\r\n    const nextState: GameState = {\r\n        snake: Object.create(state.snake) as Snake,\r\n        score: state.score,\r\n        food: state.food,\r\n        isSpeedUpdated: false,\r\n        isPaused: state.isPaused,\r\n        isGameOver: state.isGameOver\r\n    };\r\n\r\n    const snake = nextState.snake;\r\n    snake.x = state.snake.x;\r\n    snake.y = state.snake.y;\r\n    snake.speed = state.snake.speed;\r\n    snake.direction = state.snake.direction;\r\n    snake.bodyLength = state.snake.bodyLength;\r\n    snake.body = state.snake.body;\r\n\r\n    switch (action.type) {\r\n        case MOVE_SNAKE:\r\n            snake.move();\r\n            if (snake.x === state.food[0] && snake.y === state.food[1]) {\r\n                snake.bodyLength += 1;\r\n                snake.speed *= SPEED_MULTIPLIER;\r\n                nextState.isSpeedUpdated = true;\r\n                nextState.food = randomPosition();\r\n                nextState.score += SCORE;\r\n            } else if (snake.isCrashed()) {\r\n                console.log('Game is over.');\r\n                nextState.isGameOver = true;\r\n            }\r\n            return nextState;\r\n        case CHANGE_SNAKE_DIRECTION:\r\n            snake.changeDirection(action.direction);\r\n            return nextState;\r\n        case PAUSE_GAME:\r\n            console.log('Pause the game');\r\n            nextState.isPaused = true;\r\n            return nextState;\r\n        case CONTINUE_GAME:\r\n            console.log('Continue the game');\r\n            nextState.isPaused = false;\r\n            return nextState;\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}","import { createStore, combineReducers} from 'redux';\r\nimport { actionReducer } from './ActionReducer';\r\n\r\nexport const rootReducer = combineReducers({ actionReducer });\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\nexport const store = createStore(rootReducer);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Provider } from 'react-redux';\nimport { store } from './store/rootStore';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}